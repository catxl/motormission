<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Dec 14 16:40:53 2024
<BR><P>
<H3>Maximum Stack Usage =        460 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; AllMissionsTick &rArr; MissionTick &rArr; ActionBatchExecute &rArr; ActionExecute &rArr; common_motor_move3 &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[33]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">ADC0_1_IRQHandler</a><BR>
 <LI><a href="#[ae]">IndicatorShow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae]">IndicatorShow</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ADC0_1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[50]">ADC2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1b]">BusFault_Handler</a> from gd32f30x_it.o(i.BusFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[37]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[8]">CmdProcAllMotorsHoldCancel</a> from cmd_proc_share_func.o(i.CmdProcAllMotorsHoldCancel) referenced 2 times from protocol.o(.data)
 <LI><a href="#[9]">CmdProcAllMotorsHoldKeep</a> from cmd_proc_share_func.o(i.CmdProcAllMotorsHoldKeep) referenced 2 times from protocol.o(.data)
 <LI><a href="#[16]">CmdProcDcMotorGetStatus</a> from cmd_proc_share_func.o(i.CmdProcDcMotorGetStatus) referenced 2 times from protocol.o(.data)
 <LI><a href="#[14]">CmdProcDcMotorStart</a> from cmd_proc_share_func.o(i.CmdProcDcMotorStart) referenced 2 times from protocol.o(.data)
 <LI><a href="#[15]">CmdProcDcMotorStop</a> from cmd_proc_share_func.o(i.CmdProcDcMotorStop) referenced 2 times from protocol.o(.data)
 <LI><a href="#[5]">CmdProcDoAction</a> from cmd_proc_share_func.o(i.CmdProcDoAction) referenced 2 times from protocol.o(.data)
 <LI><a href="#[2]">CmdProcExecDemo</a> from cmd_proc_func.o(i.CmdProcExecDemo) referenced 2 times from protocol.o(.data)
 <LI><a href="#[10]">CmdProcGetAllPhoteSensorStatus</a> from cmd_proc_share_func.o(i.CmdProcGetAllPhoteSensorStatus) referenced 2 times from protocol.o(.data)
 <LI><a href="#[11]">CmdProcGetPhoteSensorStatus</a> from cmd_proc_share_func.o(i.CmdProcGetPhoteSensorStatus) referenced 2 times from protocol.o(.data)
 <LI><a href="#[6]">CmdProcGetRegValue</a> from cmd_proc_share_func.o(i.CmdProcGetRegValue) referenced 2 times from protocol.o(.data)
 <LI><a href="#[12]">CmdProcGetValveStatus</a> from cmd_proc_share_func.o(i.CmdProcGetValveStatus) referenced 2 times from protocol.o(.data)
 <LI><a href="#[4]">CmdProcGetVersion</a> from cmd_proc_share_func.o(i.CmdProcGetVersion) referenced 2 times from protocol.o(.data)
 <LI><a href="#[3]">CmdProcHeartBeat</a> from cmd_proc_share_func.o(i.CmdProcHeartBeat) referenced 2 times from protocol.o(.data)
 <LI><a href="#[a]">CmdProcNthMotorHoldCancel</a> from cmd_proc_share_func.o(i.CmdProcNthMotorHoldCancel) referenced 2 times from protocol.o(.data)
 <LI><a href="#[b]">CmdProcNthMotorHoldKeep</a> from cmd_proc_share_func.o(i.CmdProcNthMotorHoldKeep) referenced 2 times from protocol.o(.data)
 <LI><a href="#[e]">CmdProcNthMotorInit</a> from cmd_proc_share_func.o(i.CmdProcNthMotorInit) referenced 2 times from protocol.o(.data)
 <LI><a href="#[c]">CmdProcNthMotorMove</a> from cmd_proc_share_func.o(i.CmdProcNthMotorMove) referenced 2 times from protocol.o(.data)
 <LI><a href="#[d]">CmdProcNthMotorMoveToPos</a> from cmd_proc_share_func.o(i.CmdProcNthMotorMoveToPos) referenced 2 times from protocol.o(.data)
 <LI><a href="#[f]">CmdProcNthMotorMoveTypeToX</a> from cmd_proc_share_func.o(i.CmdProcNthMotorMoveTypeToX) referenced 2 times from protocol.o(.data)
 <LI><a href="#[13]">CmdProcNthValveTurn</a> from cmd_proc_share_func.o(i.CmdProcNthValveTurn) referenced 2 times from protocol.o(.data)
 <LI><a href="#[7]">CmdProcWriteRegValue</a> from cmd_proc_share_func.o(i.CmdProcWriteRegValue) referenced 2 times from protocol.o(.data)
 <LI><a href="#[2c]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2d]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2e]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">DMA0_Channel3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">DMA0_Channel4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">DMA0_Channel6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[59]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5a]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5b]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5c]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1e]">DebugMon_Handler</a> from gd32f30x_it.o(i.DebugMon_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[51]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[27]">EXTI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[49]">EXTI10_15_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">EXTI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">EXTI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2a]">EXTI3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">EXTI4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">EXTI5_9_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[25]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19]">HardFault_Handler</a> from gd32f30x_it.o(i.HardFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[22]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a]">MemManage_Handler</a> from gd32f30x_it.o(i.MemManage_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[18]">NMI_Handler</a> from gd32f30x_it.o(i.NMI_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1f]">PendSV_Handler</a> from gd32f30x_it.o(i.PendSV_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[26]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4a]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">RTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[52]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[44]">SPI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[45]">SPI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[54]">SPI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1d]">SVC_Handler</a> from gd32f30x_it.o(i.SVC_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[20]">SysTick_Handler</a> from gd32f30x_it.o(i.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_gd32f30x.o(i.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[23]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3b]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3a]">TIMER0_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">TIMER1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">TIMER2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3f]">TIMER3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[53]">TIMER4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[57]">TIMER5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[58]">TIMER6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4c]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4f]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4e]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4d]">TIMER7_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[55]">UART3_IRQHandler</a> from gd32f30x_it.o(i.UART3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[56]">UART4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[46]">USART0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[47]">USART1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[48]">USART2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">USBD_LP_CAN0_RX0_IRQHandler</a> from gd32f30x_it.o(i.USBD_LP_CAN0_RX0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4b]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1c]">UsageFault_Handler</a> from gd32f30x_it.o(i.UsageFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[21]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[5d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">s_pf_reset_encoder</a> from common_motors.o(i.s_pf_reset_encoder) referenced 2 times from common_motors.o(.data)
 <LI><a href="#[1]">s_pf_reset_offset</a> from common_motors.o(i.s_pf_reset_offset) referenced 20 times from common_motors.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[65]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[130]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[131]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[17]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Frame
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommPackProcess
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcHeartBeat
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetVersion
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[137]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>ActionBatchExecute</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, public_actions.o(i.ActionBatchExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ActionBatchExecute &rArr; ActionExecute &rArr; common_motor_move3 &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionTick
</UL>

<P><STRONG><a name="[67]"></a>ActionExecute</STRONG> (Thumb, 1230 bytes, Stack size 48 bytes, public_actions.o(i.ActionExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ActionExecute &rArr; common_motor_move3 &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_unlock
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move_reverse
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_unlock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_start_compensate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_step_x
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_finished
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move3
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDcMotor
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDcMotor
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionMessageArgs1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceSetArgs5
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceSetArgs4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceSetArgs3
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceSetArgs2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceSetArgs1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceDone
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionGetFunctorArg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorStop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorStart
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExternExecute
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStartCountDown
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveBatchTurnOn
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveBatchTurnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionBatchExecute
</UL>

<P><STRONG><a name="[83]"></a>ActionExternExecute</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, public_actions_extern.o(i.ActionExternExecute))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[84]"></a>AllMissionsTick</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, public_missions.o(i.AllMissionsTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = AllMissionsTick &rArr; MissionTick &rArr; ActionBatchExecute &rArr; ActionExecute &rArr; common_motor_move3 &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CAN_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, can_io.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN_Init &rArr; can_networking_init &rArr; can_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_networking_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_io_init
</UL>

<P><STRONG><a name="[aa]"></a>CalcCheckSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, commpacket.o(i.CalcCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCommPacket
</UL>

<P><STRONG><a name="[da]"></a>CalcTimeMS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, public_timers.o(i.CalcTimeMS))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerElapsedMs
</UL>

<P><STRONG><a name="[8]"></a>CmdProcAllMotorsHoldCancel</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, cmd_proc_share_func.o(i.CmdProcAllMotorsHoldCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CmdProcAllMotorsHoldCancel &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_hold_cancel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>CmdProcAllMotorsHoldKeep</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, cmd_proc_share_func.o(i.CmdProcAllMotorsHoldKeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CmdProcAllMotorsHoldKeep &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_hold_keep
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>CmdProcDcMotorGetStatus</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, cmd_proc_share_func.o(i.CmdProcDcMotorGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = CmdProcDcMotorGetStatus &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>CmdProcDcMotorStart</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, cmd_proc_share_func.o(i.CmdProcDcMotorStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = CmdProcDcMotorStart &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDcMotorWithSpeed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>CmdProcDcMotorStop</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, cmd_proc_share_func.o(i.CmdProcDcMotorStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = CmdProcDcMotorStop &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDcMotor
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>CmdProcDoAction</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, cmd_proc_share_func.o(i.CmdProcDoAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = CmdProcDoAction &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ushort_from_big_end
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>CmdProcExecDemo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmd_proc_func.o(i.CmdProcExecDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = CmdProcExecDemo &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>CmdProcGetAllPhoteSensorStatus</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, cmd_proc_share_func.o(i.CmdProcGetAllPhoteSensorStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CmdProcGetAllPhoteSensorStatus &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllPhotoSensorStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>CmdProcGetPhoteSensorStatus</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, cmd_proc_share_func.o(i.CmdProcGetPhoteSensorStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CmdProcGetPhoteSensorStatus &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhotoSensorStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllPhotoSensorStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>CmdProcGetRegValue</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, cmd_proc_share_func.o(i.CmdProcGetRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CmdProcGetRegValue &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>CmdProcGetValveStatus</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, cmd_proc_share_func.o(i.CmdProcGetValveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CmdProcGetValveStatus &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValveStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>CmdProcGetVersion</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, cmd_proc_share_func.o(i.CmdProcGetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CmdProcGetVersion &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCommPacket
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCtrl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>CmdProcHeartBeat</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, cmd_proc_share_func.o(i.CmdProcHeartBeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CmdProcHeartBeat &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCommPacket
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCtrl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>CmdProcNthMotorHoldCancel</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, cmd_proc_share_func.o(i.CmdProcNthMotorHoldCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = CmdProcNthMotorHoldCancel &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_hold_cancel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>CmdProcNthMotorHoldKeep</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, cmd_proc_share_func.o(i.CmdProcNthMotorHoldKeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = CmdProcNthMotorHoldKeep &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_hold_keep
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>CmdProcNthMotorInit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cmd_proc_share_func.o(i.CmdProcNthMotorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = CmdProcNthMotorInit &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_motor_id_from_step_motor_id
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>CmdProcNthMotorMove</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, cmd_proc_share_func.o(i.CmdProcNthMotorMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CmdProcNthMotorMove &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>CmdProcNthMotorMoveToPos</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cmd_proc_share_func.o(i.CmdProcNthMotorMoveToPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = CmdProcNthMotorMoveToPos &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_motor_id_from_step_motor_id
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>CmdProcNthMotorMoveTypeToX</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, cmd_proc_share_func.o(i.CmdProcNthMotorMoveTypeToX))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = CmdProcNthMotorMoveTypeToX &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_motor_id_from_step_motor_id
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>CmdProcNthValveTurn</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, cmd_proc_share_func.o(i.CmdProcNthValveTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CmdProcNthValveTurn &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveSetOnOff
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>CmdProcWriteRegValue</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, cmd_proc_share_func.o(i.CmdProcWriteRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CmdProcWriteRegValue &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>CommBufferGetChar</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, public_comm_buffer.o(i.CommBufferGetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommBufferGetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidPacketFromCommBuffer
</UL>

<P><STRONG><a name="[9f]"></a>CommBufferGetCount</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, public_comm_buffer.o(i.CommBufferGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferIsEmpty
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferGetLeftSize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferPop
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidPacketFromCommBuffer
</UL>

<P><STRONG><a name="[9e]"></a>CommBufferGetLeftSize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, public_comm_buffer.o(i.CommBufferGetLeftSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommBufferGetLeftSize
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferPush
</UL>

<P><STRONG><a name="[12a]"></a>CommBufferInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, public_comm_buffer.o(i.CommBufferInit))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[a0]"></a>CommBufferIsEmpty</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, public_comm_buffer.o(i.CommBufferIsEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommBufferIsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCommPacketFromCommBuffer
</UL>

<P><STRONG><a name="[a1]"></a>CommBufferPop</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, public_comm_buffer.o(i.CommBufferPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommBufferPop
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCommPacketFromCommBuffer
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>CommBufferPush</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, public_comm_buffer.o(i.CommBufferPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CommBufferPush &rArr; CommBufferGetLeftSize
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferGetLeftSize
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>CommPackProcess</STRONG> (Thumb, 64 bytes, Stack size 136 bytes, comm_proc.o(i.CommPackProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = CommPackProcess &rArr; PacketProcess &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCommPacketFromCommBuffer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>DetectorExternStart</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, public_detectors_extern.o(i.DetectorExternStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DetectorExternStart &rArr; SensorCounterProcessingStart
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessingStart
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorStart
</UL>

<P><STRONG><a name="[a8]"></a>DetectorExternStop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, public_detectors_extern.o(i.DetectorExternStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DetectorExternStop
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessingStop
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorStop
</UL>

<P><STRONG><a name="[79]"></a>DetectorStart</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, public_detectors.o(i.DetectorStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DetectorStart &rArr; DetectorExternStart &rArr; SensorCounterProcessingStart
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorExternStart
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStartCountDown
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[7a]"></a>DetectorStop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, public_detectors.o(i.DetectorStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DetectorStop &rArr; DetectorExternStop
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorExternStop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[9a]"></a>FillCommPacket</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, commpacket.o(i.FillCommPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FillCommPacket &rArr; CalcCheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcHeartBeat
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetVersion
</UL>

<P><STRONG><a name="[a4]"></a>FillCommPacketFromCommBuffer</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, commpacket.o(i.FillCommPacketFromCommBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FillCommPacketFromCommBuffer &rArr; IsValidPacketFromCommBuffer &rArr; CommBufferGetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferIsEmpty
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferPop
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidPacketFromCommBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommPackProcess
</UL>

<P><STRONG><a name="[d9]"></a>GetCurrentSysTickCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_it.o(i.GetCurrentSysTickCounter))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerElapsedMs
</UL>

<P><STRONG><a name="[8c]"></a>GetPackFieldCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, commpacket.o(i.GetPackFieldCmd))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcWriteRegValue
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthValveTurn
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMove
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldKeep
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldCancel
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcHeartBeat
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetVersion
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetValveStatus
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetRegValue
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetPhoteSensorStatus
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetAllPhoteSensorStatus
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDoAction
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStop
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStart
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorGetStatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldKeep
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldCancel
</UL>

<P><STRONG><a name="[99]"></a>GetPackFieldCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commpacket.o(i.GetPackFieldCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcHeartBeat
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetVersion
</UL>

<P><STRONG><a name="[8e]"></a>GetPackFieldDst</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commpacket.o(i.GetPackFieldDst))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommPackProcess
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcWriteRegValue
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthValveTurn
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMove
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldKeep
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldCancel
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcHeartBeat
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetVersion
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetValveStatus
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetRegValue
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetPhoteSensorStatus
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetAllPhoteSensorStatus
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDoAction
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStop
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStart
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorGetStatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldKeep
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldCancel
</UL>

<P><STRONG><a name="[ac]"></a>GetPackFieldLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commpacket.o(i.GetPackFieldLen))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParamsLen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParams
</UL>

<P><STRONG><a name="[91]"></a>GetPackFieldParams</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, commpacket.o(i.GetPackFieldParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPackFieldParams
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldLen
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcWriteRegValue
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthValveTurn
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMoveTypeToX
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMoveToPos
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMove
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldKeep
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldCancel
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetValveStatus
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetRegValue
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetPhoteSensorStatus
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDoAction
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStop
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStart
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorGetStatus
</UL>

<P><STRONG><a name="[ad]"></a>GetPackFieldParamsLen</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, commpacket.o(i.GetPackFieldParamsLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetPackFieldParamsLen
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldLen
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess
</UL>

<P><STRONG><a name="[8d]"></a>GetPackFieldSrc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commpacket.o(i.GetPackFieldSrc))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcWriteRegValue
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthValveTurn
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMove
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldKeep
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldCancel
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcHeartBeat
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetVersion
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetValveStatus
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetRegValue
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetPhoteSensorStatus
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetAllPhoteSensorStatus
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDoAction
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStop
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStart
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorGetStatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldKeep
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldCancel
</UL>

<P><STRONG><a name="[96]"></a>GetPhotoSensorStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, public_photosensors.o(i.GetPhotoSensorStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetPhoteSensorStatus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessingTick
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessingStart
</UL>

<P><STRONG><a name="[97]"></a>GetValveStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, public_valves.o(i.GetValveStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetValveStatus
</UL>

<P><STRONG><a name="[19]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>IndicatorExternShow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, public_indicators_extern.o(i.IndicatorExternShow))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[ae]"></a>IndicatorShow</STRONG> (Thumb, 1158 bytes, Stack size 24 bytes, public_indicators.o(i.IndicatorShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = IndicatorShow &rArr;  IndicatorShow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_try_lock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_get_remain_step
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhotoSensorStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_try_lock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_stopped
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_move_succ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_move_fail
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_compensate_done
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_get_remain_step
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceNodeEnteredCountLittleOrEqual
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceNodeEnteredCountLittle
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceNodeEnteredCountEqual
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceNodeEnteredCountBigOrEqual
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceNodeEnteredCountBig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceIsFailed
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceIsCompleted
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDetectorTriggered
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorExternShow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionGetFunctorArg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[c1]"></a>IsDetectorExternTriggered</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, public_detectors_extern.o(i.IsDetectorExternTriggered))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsDetectorExternTriggered
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSensorCounterProcessingTriggered
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDetectorTriggered
</UL>

<P><STRONG><a name="[bf]"></a>IsDetectorTriggered</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, public_detectors.o(i.IsDetectorTriggered))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsDetectorTriggered &rArr; IsTimeOut &rArr; TimerTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPhotoSensorActived
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDetectorExternTriggered
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[c3]"></a>IsPhotoSensorActived</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, public_photosensors.o(i.IsPhotoSensorActived))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDetectorTriggered
</UL>

<P><STRONG><a name="[c2]"></a>IsSensorCounterProcessingTriggered</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sensor_counter_processors.o(i.IsSensorCounterProcessingTriggered))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDetectorExternTriggered
</UL>

<P><STRONG><a name="[b5]"></a>IsTimeOut</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, public_timers.o(i.IsTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsTimeOut &rArr; TimerTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDetectorTriggered
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[ab]"></a>IsValidPacketFromCommBuffer</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, commpacket.o(i.IsValidPacketFromCommBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsValidPacketFromCommBuffer &rArr; CommBufferGetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferGetCount
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferGetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCommPacketFromCommBuffer
</UL>

<P><STRONG><a name="[1a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>MissionGetFunctorArg</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, public_missions.o(i.MissionGetFunctorArg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MissionGetFunctorArg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[81]"></a>MissionInstanceDone</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, public_missions.o(i.MissionInstanceDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MissionInstanceDone &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ushort_to_big_endian
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_finished
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[b6]"></a>MissionInstanceIsCompleted</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceIsCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[b7]"></a>MissionInstanceIsFailed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceIsFailed))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_move_fail
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[fa]"></a>MissionInstanceIsSucced</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceIsSucced))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_move_succ
</UL>

<P><STRONG><a name="[c9]"></a>MissionInstanceIsWorking</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceIsWorking))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
</UL>

<P><STRONG><a name="[ba]"></a>MissionInstanceNodeEnteredCountBig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceNodeEnteredCountBig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[bc]"></a>MissionInstanceNodeEnteredCountBigOrEqual</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceNodeEnteredCountBigOrEqual))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[b9]"></a>MissionInstanceNodeEnteredCountEqual</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceNodeEnteredCountEqual))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[bb]"></a>MissionInstanceNodeEnteredCountLittle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceNodeEnteredCountLittle))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[b8]"></a>MissionInstanceNodeEnteredCountLittleOrEqual</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceNodeEnteredCountLittleOrEqual))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[7c]"></a>MissionInstanceSetArgs1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceSetArgs1))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[7d]"></a>MissionInstanceSetArgs2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, public_missions.o(i.MissionInstanceSetArgs2))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[7e]"></a>MissionInstanceSetArgs3</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, public_missions.o(i.MissionInstanceSetArgs3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MissionInstanceSetArgs3
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[7f]"></a>MissionInstanceSetArgs4</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, public_missions.o(i.MissionInstanceSetArgs4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MissionInstanceSetArgs4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[80]"></a>MissionInstanceSetArgs5</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, public_missions.o(i.MissionInstanceSetArgs5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MissionInstanceSetArgs5
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[fc]"></a>MissionInstanceSetArgs6</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, public_missions.o(i.MissionInstanceSetArgs6))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MissionInstanceSetArgs6
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
</UL>

<P><STRONG><a name="[c7]"></a>MissionInstanceSetPacketArgs</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, public_missions.o(i.MissionInstanceSetPacketArgs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MissionInstanceSetPacketArgs
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionSetPacketArgs
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
</UL>

<P><STRONG><a name="[7b]"></a>MissionInstanceStart</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, public_missions.o(i.MissionInstanceStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionStart
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionReset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceSetPacketArgs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceIsWorking
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDoAction
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcExecDemo
</UL>

<P><STRONG><a name="[82]"></a>MissionMessageArgs1</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, public_missions.o(i.MissionMessageArgs1))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MissionMessageArgs1 &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[cc]"></a>MissionNodeEnter</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, public_missions.o(i.MissionNodeEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMissionTraceMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionStart
</UL>

<P><STRONG><a name="[ce]"></a>MissionNodeIsActived</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, public_missions.o(i.MissionNodeIsActived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MissionNodeIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionNodeIsFinally
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionTick
</UL>

<P><STRONG><a name="[cf]"></a>MissionNodeIsFinally</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, public_missions.o(i.MissionNodeIsFinally))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionNodeIsActived
</UL>

<P><STRONG><a name="[d0]"></a>MissionNodeLeave</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, public_missions.o(i.MissionNodeLeave))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionTick
</UL>

<P><STRONG><a name="[ca]"></a>MissionReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, public_missions.o(i.MissionReset))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionStart
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
</UL>

<P><STRONG><a name="[c8]"></a>MissionSetPacketArgs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, public_missions.o(i.MissionSetPacketArgs))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceSetPacketArgs
</UL>

<P><STRONG><a name="[cb]"></a>MissionStart</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, public_missions.o(i.MissionStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionReset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionNodeEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
</UL>

<P><STRONG><a name="[85]"></a>MissionTick</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, public_missions.o(i.MissionTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = MissionTick &rArr; ActionBatchExecute &rArr; ActionExecute &rArr; common_motor_move3 &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionNodeLeave
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionNodeIsFinally
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionNodeIsActived
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionNodeEnter
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionBatchExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMissionsTick
</UL>

<P><STRONG><a name="[18]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>PacketProcess</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, comm_proc.o(i.PacketProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = PacketProcess &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldParamsLen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCtrl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommPackProcess
</UL>

<P><STRONG><a name="[1f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>ReadAllPhotoSensorStatus</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, public_photosensors.o(i.ReadAllPhotoSensorStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetPhoteSensorStatus
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetAllPhoteSensorStatus
</UL>

<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>SendErrorResponsePacket</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, utils.o(i.SendErrorResponsePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SendErrorResponsePacket &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ushort_to_big_endian
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldSrc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldDst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackFieldCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMoveTypeToX
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMoveToPos
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorInit
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDoAction
</UL>

<P><STRONG><a name="[9b]"></a>SendFrame</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, utils.o(i.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_io_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcHeartBeat
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetVersion
</UL>

<P><STRONG><a name="[cd]"></a>SendMissionTraceMsg</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, utils.o(i.SendMissionTraceMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionNodeEnter
</UL>

<P><STRONG><a name="[8f]"></a>SendPacket</STRONG> (Thumb, 62 bytes, Stack size 88 bytes, utils.o(i.SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCommPacket
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMissionTraceMsg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionMessageArgs1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceDone
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcWriteRegValue
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthValveTurn
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMove
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldKeep
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldCancel
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetValveStatus
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetRegValue
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetPhoteSensorStatus
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcGetAllPhoteSensorStatus
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDoAction
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStop
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStart
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorGetStatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldKeep
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldCancel
</UL>

<P><STRONG><a name="[d2]"></a>SensorCounterProcessingReset</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sensor_counter_processors.o(i.SensorCounterProcessingReset))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pf_reset_encoder
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessingStart
</UL>

<P><STRONG><a name="[a7]"></a>SensorCounterProcessingStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sensor_counter_processors.o(i.SensorCounterProcessingStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SensorCounterProcessingStart
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhotoSensorStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessingReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorExternStart
</UL>

<P><STRONG><a name="[a9]"></a>SensorCounterProcessingStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sensor_counter_processors.o(i.SensorCounterProcessingStop))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorExternStop
</UL>

<P><STRONG><a name="[d3]"></a>SensorCounterProcessingTick</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, sensor_counter_processors.o(i.SensorCounterProcessingTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SensorCounterProcessingTick
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhotoSensorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessorsAllTick
</UL>

<P><STRONG><a name="[d4]"></a>SensorCounterProcessorsAllTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sensor_counter_processors.o(i.SensorCounterProcessorsAllTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SensorCounterProcessorsAllTick &rArr; SensorCounterProcessingTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessingTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>StartDcMotor</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, public_dc_motors.o(i.StartDcMotor))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[92]"></a>StartDcMotorWithSpeed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, public_dc_motors.o(i.StartDcMotorWithSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStart
</UL>

<P><STRONG><a name="[72]"></a>StopDcMotor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, public_dc_motors.o(i.StopDcMotor))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDcMotorStop
</UL>

<P><STRONG><a name="[6b]"></a>SwitchSet</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, public_switches.o(i.SwitchSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SwitchSet &rArr; SwitchTurnOn
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchTurnOn
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchTurnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[d5]"></a>SwitchTurnOff</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, public_switches.o(i.SwitchTurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwitchTurnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchSet
</UL>

<P><STRONG><a name="[d6]"></a>SwitchTurnOn</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, public_switches.o(i.SwitchTurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwitchTurnOn
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchSet
</UL>

<P><STRONG><a name="[20]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, system_gd32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>TimerElapsedMs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, public_timers.o(i.TimerElapsedMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerElapsedMs
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentSysTickCounter
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTimeMS
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[db]"></a>TimerStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, public_timers.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentSysTickCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStartCountDown
</UL>

<P><STRONG><a name="[6c]"></a>TimerStartCountDown</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, public_timers.o(i.TimerStartCountDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerStartCountDown &rArr; TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorStart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[6d]"></a>TimerStop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, public_timers.o(i.TimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectorStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[dc]"></a>TimerTap</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, public_timers.o(i.TimerTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerTap &rArr; TimerTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>TimerTick</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, public_timers.o(i.TimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentSysTickCounter
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTimeMS
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTap
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
</UL>

<P><STRONG><a name="[dd]"></a>Transmit_Frame</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, can_io.o(i.Transmit_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_flag_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_flag_clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_io_send
</UL>

<P><STRONG><a name="[55]"></a>UART3_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gd32f30x_it.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART3_IRQHandler &rArr; CommBufferPush &rArr; CommBufferGetLeftSize
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferPush
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferPop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32f30x_it.o(i.USBD_LP_CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LP_CAN0_RX0_IRQHandler &rArr; receive_data &rArr; CommBufferPush &rArr; CommBufferGetLeftSize
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_message_length_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ValveBatchTurnOff</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, public_valves.o(i.ValveBatchTurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ValveBatchTurnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[6a]"></a>ValveBatchTurnOn</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, public_valves.o(i.ValveBatchTurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ValveBatchTurnOn
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[9d]"></a>ValveSetOnOff</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, public_valves.o(i.ValveSetOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ValveSetOnOff &rArr; ValveTurnOn
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveTurnOn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveTurnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthValveTurn
</UL>

<P><STRONG><a name="[ea]"></a>ValveTurnOff</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, public_valves.o(i.ValveTurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ValveTurnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveSetOnOff
</UL>

<P><STRONG><a name="[eb]"></a>ValveTurnOn</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, public_valves.o(i.ValveTurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ValveTurnOn
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveSetOnOff
</UL>

<P><STRONG><a name="[e9]"></a>WaitForReady</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, public_valves.o(i.WaitForReady))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveTurnOn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveTurnOff
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveBatchTurnOn
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveBatchTurnOff
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ec]"></a>can_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_networking_init
</UL>

<P><STRONG><a name="[ef]"></a>can_error_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_can.o(i.can_error_get))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
</UL>

<P><STRONG><a name="[f3]"></a>can_filter_init</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_networking_init
</UL>

<P><STRONG><a name="[e1]"></a>can_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_can.o(i.can_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Frame
</UL>

<P><STRONG><a name="[e0]"></a>can_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Frame
</UL>

<P><STRONG><a name="[f2]"></a>can_init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, gd32f30x_can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_networking_init
</UL>

<P><STRONG><a name="[8a]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_can.o(i.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[e6]"></a>can_interrupt_flag_get</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, gd32f30x_can.o(i.can_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_message_length_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>can_io_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, can_io.o(i.can_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = can_io_init &rArr; CAN_Init &rArr; can_networking_init &rArr; can_init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>can_io_send</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, can_io.o(i.can_io_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[116]"></a>can_message_receive</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data
</UL>

<P><STRONG><a name="[df]"></a>can_message_transmit</STRONG> (Thumb, 332 bytes, Stack size 12 bytes, gd32f30x_can.o(i.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Frame
</UL>

<P><STRONG><a name="[89]"></a>can_networking_init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, can_io.o(i.can_networking_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = can_networking_init &rArr; can_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[e7]"></a>can_receive_message_length_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f30x_can.o(i.can_receive_message_length_get))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>can_struct_para_init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_networking_init
</UL>

<P><STRONG><a name="[f4]"></a>common_motor_calc_detector_param</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, public_common_motors.o(i.common_motor_calc_detector_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = common_motor_calc_detector_param &rArr; common_motor_extern_calc_detector_param &rArr; get_circle_isometry_pos_move_dir_steps
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_extern_calc_detector_param
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
</UL>

<P><STRONG><a name="[f6]"></a>common_motor_compensate_tick</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, public_common_motors.o(i.common_motor_compensate_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = common_motor_compensate_tick &rArr; step_motor_move_keep_dir &rArr; step_motor_move &rArr; step_motor_set_dir_and_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move_keep_dir
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_stopped
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_get_remain_step
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_compensate_done
</UL>

<P><STRONG><a name="[f5]"></a>common_motor_extern_calc_detector_param</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, public_common_motors_extern.o(i.common_motor_extern_calc_detector_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = common_motor_extern_calc_detector_param &rArr; get_circle_isometry_pos_move_dir_steps
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_circle_isometry_pos_move_dir_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_calc_detector_param
</UL>

<P><STRONG><a name="[fb]"></a>common_motor_extern_is_stopped</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, public_common_motors_extern.o(i.common_motor_extern_is_stopped))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_stopped
</UL>

<P><STRONG><a name="[102]"></a>common_motor_extern_move_by_strategy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, public_common_motors_extern.o(i.common_motor_extern_move_by_strategy))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_by_strategy
</UL>

<P><STRONG><a name="[b1]"></a>common_motor_get_remain_step</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, public_common_motors.o(i.common_motor_get_remain_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = common_motor_get_remain_step
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_get_remain_step
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_compensate_tick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_is_stopped
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[b4]"></a>common_motor_is_compensate_done</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, public_common_motors.o(i.common_motor_is_compensate_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = common_motor_is_compensate_done &rArr; common_motor_compensate_tick &rArr; step_motor_move_keep_dir &rArr; step_motor_move &rArr; step_motor_set_dir_and_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_compensate_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[be]"></a>common_motor_is_move_fail</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, public_common_motors.o(i.common_motor_is_move_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = common_motor_is_move_fail
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceIsFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[bd]"></a>common_motor_is_move_succ</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, public_common_motors.o(i.common_motor_is_move_succ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = common_motor_is_move_succ
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceIsSucced
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[b3]"></a>common_motor_is_stopped</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, public_common_motors.o(i.common_motor_is_stopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = common_motor_is_stopped &rArr; common_motor_get_remain_step
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_extern_is_stopped
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_get_remain_step
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_compensate_tick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[76]"></a>common_motor_move</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, public_common_motors.o(i.common_motor_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_calc_detector_param
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceSetArgs6
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceIsWorking
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_finished
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceStart
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceSetArgs5
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move3
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMoveTypeToX
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMoveToPos
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorInit
</UL>

<P><STRONG><a name="[77]"></a>common_motor_move3</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, public_common_motors.o(i.common_motor_move3))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = common_motor_move3 &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[fd]"></a>common_motor_move_by_strategy</STRONG> (Thumb, 654 bytes, Stack size 72 bytes, public_common_motors.o(i.common_motor_move_by_strategy))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = common_motor_move_by_strategy &rArr; step_motor_move_offset_step &rArr; step_motor_move &rArr; step_motor_set_dir_and_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move_offset_step
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move_keep_dir
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steps_speed_by_pos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_speed_by_steps
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_circle_move_dir_steps
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_circle_isometry_pos_move_dir_steps
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_extern_move_by_strategy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_step_x
</UL>

<P><STRONG><a name="[78]"></a>common_motor_move_finished</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, public_common_motors.o(i.common_motor_move_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = common_motor_move_finished &rArr; MissionInstanceDone &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceDone
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[74]"></a>common_motor_move_step_x</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, public_common_motors.o(i.common_motor_move_step_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = common_motor_move_step_x &rArr; common_motor_move_by_strategy &rArr; step_motor_move_offset_step &rArr; step_motor_move &rArr; step_motor_set_dir_and_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_by_strategy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[75]"></a>common_motor_start_compensate</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, public_common_motors.o(i.common_motor_start_compensate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = common_motor_start_compensate
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[b2]"></a>common_motor_try_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, public_common_motors.o(i.common_motor_try_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = common_motor_try_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_try_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[73]"></a>common_motor_unlock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, public_common_motors.o(i.common_motor_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = common_motor_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[103]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timers.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_ms &rArr; TimerElapsedMs
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerElapsedMs
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_init
</UL>

<P><STRONG><a name="[104]"></a>exmc_lcd_init</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, lcds.o(i.exmc_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = exmc_lcd_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_norsram_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_norsram_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>exmc_norsram_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_exmc.o(i.exmc_norsram_enable))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_lcd_init
</UL>

<P><STRONG><a name="[107]"></a>exmc_norsram_init</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, gd32f30x_exmc.o(i.exmc_norsram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exmc_norsram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_lcd_init
</UL>

<P><STRONG><a name="[109]"></a>fpga_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.fpga_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fpga_init &rArr; delay_ms &rArr; TimerElapsedMs
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>gd_eval_led_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, leds.o(i.gd_eval_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gd_eval_led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>gd_eval_led_toggle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, leds.o(i.gd_eval_led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gd_eval_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>get_circle_isometry_pos_move_dir_steps</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, public_utils.o(i.get_circle_isometry_pos_move_dir_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_circle_isometry_pos_move_dir_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_extern_calc_detector_param
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_by_strategy
</UL>

<P><STRONG><a name="[fe]"></a>get_circle_move_dir_steps</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, public_utils.o(i.get_circle_move_dir_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_circle_move_dir_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_by_strategy
</UL>

<P><STRONG><a name="[9c]"></a>get_common_motor_id_from_step_motor_id</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, public_common_motors.o(i.get_common_motor_id_from_step_motor_id))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMoveTypeToX
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMoveToPos
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorInit
</UL>

<P><STRONG><a name="[100]"></a>get_speed_by_steps</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, public_utils.o(i.get_speed_by_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_speed_by_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_by_strategy
</UL>

<P><STRONG><a name="[101]"></a>get_steps_speed_by_pos</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, public_utils.o(i.get_steps_speed_by_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_steps_speed_by_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_by_strategy
</UL>

<P><STRONG><a name="[10a]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_init
</UL>

<P><STRONG><a name="[10e]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>

<P><STRONG><a name="[87]"></a>gpio_config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, can_io.o(i.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[10f]"></a>gpio_config_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usart_io.o(i.gpio_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_config_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[106]"></a>gpio_init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_lcd_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[10d]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>

<P><STRONG><a name="[118]"></a>gpio_pin_remap_config</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = main &rArr; AllMissionsTick &rArr; MissionTick &rArr; ActionBatchExecute &rArr; ActionExecute &rArr; common_motor_move3 &rArr; common_motor_move &rArr; MissionInstanceStart &rArr; MissionStart &rArr; MissionNodeEnter &rArr; SendMissionTraceMsg &rArr; SendPacket &rArr; SendFrame &rArr; can_io_send &rArr; Transmit_Frame &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_lcd_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_io_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTap
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessorsAllTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllPhotoSensorStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommPackProcess
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMissionsTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[88]"></a>nvic_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can_io.o(i.nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[111]"></a>nvic_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f30x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
</UL>

<P><STRONG><a name="[115]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[120]"></a>rcu_clock_freq_get</STRONG> (Thumb, 310 bytes, Stack size 84 bytes, gd32f30x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[105]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_lcd_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[ee]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[ed]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[e8]"></a>receive_data</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, can_io.o(i.receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = receive_data &rArr; CommBufferPush &rArr; CommBufferGetLeftSize
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferPush
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[114]"></a>spi_flash_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, eeprom.o(i.spi_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_flash_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[af]"></a>step_motor_get_remain_step</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, public_step_motors.o(i.step_motor_get_remain_step))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_get_remain_step
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[8b]"></a>step_motor_hold_cancel</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, public_step_motors.o(i.step_motor_hold_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = step_motor_hold_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_set_step
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldCancel
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldCancel
</UL>

<P><STRONG><a name="[90]"></a>step_motor_hold_keep</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, public_step_motors.o(i.step_motor_hold_keep))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = step_motor_hold_keep
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_set_step
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorHoldKeep
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcAllMotorsHoldKeep
</UL>

<P><STRONG><a name="[6e]"></a>step_motor_move</STRONG> (Thumb, 190 bytes, Stack size 28 bytes, public_step_motors.o(i.step_motor_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = step_motor_move &rArr; step_motor_set_dir_and_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_set_step
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_set_dir_and_speed
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_get_remain_step
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move_reverse
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move_offset_step
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move_keep_dir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_by_strategy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcNthMotorMove
</UL>

<P><STRONG><a name="[f7]"></a>step_motor_move_keep_dir</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, public_step_motors.o(i.step_motor_move_keep_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = step_motor_move_keep_dir &rArr; step_motor_move &rArr; step_motor_set_dir_and_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_by_strategy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_compensate_tick
</UL>

<P><STRONG><a name="[ff]"></a>step_motor_move_offset_step</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, public_step_motors.o(i.step_motor_move_offset_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = step_motor_move_offset_step &rArr; step_motor_move &rArr; step_motor_set_dir_and_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_move_by_strategy
</UL>

<P><STRONG><a name="[6f]"></a>step_motor_move_reverse</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, public_step_motors.o(i.step_motor_move_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = step_motor_move_reverse &rArr; step_motor_move &rArr; step_motor_set_dir_and_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[117]"></a>step_motor_reset_offset_steps</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, public_step_motors.o(i.step_motor_reset_offset_steps))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pf_reset_offset
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pf_reset_encoder
</UL>

<P><STRONG><a name="[11c]"></a>step_motor_set_dir_and_speed</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, public_step_motors.o(i.step_motor_set_dir_and_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = step_motor_set_dir_and_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move
</UL>

<P><STRONG><a name="[11b]"></a>step_motor_set_step</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, public_step_motors.o(i.step_motor_set_step))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_move
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_hold_keep
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_hold_cancel
</UL>

<P><STRONG><a name="[f8]"></a>step_motor_stop</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, public_step_motors.o(i.step_motor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = step_motor_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_set_step
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_compensate_tick
</UL>

<P><STRONG><a name="[b0]"></a>step_motor_try_lock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, public_step_motors.o(i.step_motor_try_lock))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_try_lock
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorShow
</UL>

<P><STRONG><a name="[70]"></a>step_motor_unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, public_step_motors.o(i.step_motor_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_motor_unlock
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionExecute
</UL>

<P><STRONG><a name="[113]"></a>systick_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, timers.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f30x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[e3]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[129]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[e4]"></a>usart_flag_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[125]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[110]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config_init
</UL>

<P><STRONG><a name="[e2]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f30x_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>usart_io_init</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, public_usart_io.o(i.usart_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usart_io_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBufferInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[127]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[123]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[128]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[122]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_io_init
</UL>

<P><STRONG><a name="[93]"></a>ushort_from_big_end</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, byte_sequence.o(i.ushort_from_big_end))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcDoAction
</UL>

<P><STRONG><a name="[c6]"></a>ushort_to_big_endian</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, byte_sequence.o(i.ushort_to_big_endian))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorResponsePacket
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MissionInstanceDone
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11e]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timers.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[0]"></a>s_pf_reset_encoder</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, common_motors.o(i.s_pf_reset_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = s_pf_reset_encoder
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_reset_offset_steps
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCounterProcessingReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_motors.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>s_pf_reset_offset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, common_motors.o(i.s_pf_reset_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = s_pf_reset_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_reset_offset_steps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_motors.o(.data)
</UL>
<P><STRONG><a name="[11d]"></a>system_clock_72m_hxtal</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, system_gd32f30x.o(i.system_clock_72m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d7]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f30x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_72m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
